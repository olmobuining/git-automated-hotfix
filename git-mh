#!/bin/sh
#
# Quick way to create a hotfix from the master branch.
# with the currently changed files.
#
# @version 0.921
# @author Olmo
# @created 2015-09-24
# @updated 2015-10-23 Added the PRE-COMMIT check, with the possibility to continue with a '--no-verify'
# @updated 2015-10-26 Change if statement(it was the wrong way around)
# @updated 2015-10-30 Add check: If a hotfix already exists, exit out of the script, otherwise it will commit into the master..
# @updated 2016-10-12 Add merge conflict checks
# @updated 2017-04-24 echo -> echo, added some newlines.
#

[ ! -e .git/HEAD ] && echo "not a git repository?" >&2 && exit 1

CHANGED=$(git diff-index --name-only HEAD --);
if [ -n "$CHANGED" ]; then

    hotfixcheck=$(git branch | grep -E "hotfix/" );

    if [ -n "$hotfixcheck" ]; then
        echo "\033[31mERROR\033[0m -- A hotfix already exists! please finish it first!";
        exit;
    fi

    mergeconflicts=$(git ls-files -u);

    if [ -n "$mergeconflicts" ]; then
        echo "\033[31mERROR\033[0m -- Please fix the merge conflicts first";
        exit;
    fi

    # start PRE-COMMIT check
    echo "\033[97m###\033[92mPre-Commit\033[97m###";

    FILES_PATTERN='(\..+)?$'
    FORBIDDEN="console\.(debug|info|log|warn)\([^)]*\)|var_dump\([^)]*\)|print_r\([^)]*\)|^dd\([^)]*\)|dv\([^)]*\)|<<<<<<<|=======|>>>>>>>"

    # Check for cached files (added for the commit) for a forbidden pattern.
    CHECK=$(git diff --cached --name-only | grep -E $FILES_PATTERN | xargs grep -E --with-filename -n $FORBIDDEN | grep -v '//')
    # Check for files that are not yet added for a forbidden pattern.
    CHECK2=$(git diff --name-only | grep -E $FILES_PATTERN | xargs grep -E --with-filename -n $FORBIDDEN | grep -v '//')
    # There are no forbidden patterns found by default.
    FAULT=0;

    printf "\nPRE-COMMIT resultaat: "

    # Check the files that are added for commit
    if [ -n "$CHECK" ];
    then
        echo "\033[31mERROR\033[0m "
        echo "${CHECK}"
        FAULT=1;
    fi

    # Check the files that are not added yet
    if [ -n "$CHECK2" ];
    then
        echo "\033[31mERROR\033[0m "
        echo "${CHECK2}"
        FAULT=1;
    fi

    # Are there any forbidden patterns found?
    if [ "$FAULT" = 1 ]; then
        echo " "
        # Ask if you would like to continue
        read -p "PRE-COMMIT failed. Would you like to continue with a --no-verify? [y/n] " -n 1 -r
        echo " "
        if [ "$REPLY" = "n" ]; then
            echo "\033[31mSTOPPED\033[0m\nPlease run it again after you've fixed the mistakes, no action taken now"
            echo ""
            exit;
        fi
        if [ "$REPLY" != "n" ] && [ "$REPLY" != "y" ]; then
            echo "\033[31mSTOPPED\033[0m\nPlease answer 'y' or 'n'."
            echo ""
            exit;
        fi
    else
        # Everything is A-ok!
        echo " \033[32mOK\033[0m"
    fi
    # Only display this message when you choose to continue and had a forbidden pattern found
    if [ "$FAULT" = 1 ]; then
        echo "\033[32mContinuing with a '--no-verify'\033[0m"
    fi
    # end PRE-COMMIT check

    # Define separator
    SEPA="\033[34m####################################\033[0m";

    if [ -n "$1" ]; then

        echo " "
        echo $SEPA
        echo "##### Stash changes for $1"
        echo $SEPA
        git stash

        echo " "
        echo $SEPA
        echo "##### Update DEVELOP"
        echo $SEPA
        git checkout develop
        git pull -r

        echo " "
        echo $SEPA
        echo "##### Update MASTER"
        echo $SEPA
        git checkout master
        git pull -r

        # Check for merge conflicts
        mergeconflicts=$(git ls-files -u);

        if [ -n "$mergeconflicts" ]; then
            echo "\033[31mERROR\033[0m -- Please fix the merge conflicts first";
            exit;
        fi

        echo " "
        echo $SEPA
        echo "##### Create hotfix"
        echo $SEPA
        git flow hotfix start $1

        echo " "
        echo $SEPA
        echo "##### POP stash"
        echo $SEPA
        git stash pop

        # Check for merge conflicts
        mergeconflicts=$(git ls-files -u);

        if [ -n "$mergeconflicts" ]; then
            echo "\033[31mERROR\033[0m -- Please fix the merge conflicts first";
            exit;
        fi

        echo " "
        echo $SEPA
        echo "##### Add all files"
        echo $SEPA
        git add --all

        echo " "
        echo $SEPA
        echo "##### Commit message && Commit"
        echo $SEPA

        if [ -n "$2" ]; then
            # If second argument isset, set it to the user input
            USERINPUT=$2
        else
            # If the second argument is not set, ask for it.
            echo "Commit message WITHOUT the ticket number: "
            read USERINPUT
        fi

        if [ -n "$USERINPUT" ]; then
            if [ "$FAULT" = 1 ]; then
                git commit -m "#$1 $USERINPUT" --no-verify
            else
                git commit -m "#$1 $USERINPUT"
            fi

            echo " "
            echo $SEPA
            echo "##### Finish hotfix"
            echo $SEPA
            git flow hotfix finish -n $1

            echo " "
            echo $SEPA
            echo "##### Update DEVELOP"
            echo $SEPA
            git checkout develop
            git pull -r

            # Check for merge conflicts
            mergeconflicts=$(git ls-files -u);

            if [ -n "$mergeconflicts" ]; then
                echo "\033[31mERROR\033[0m -- Please fix the merge conflicts first, after please push master and develop";
                exit;
            fi

            git push

            echo " "
            echo $SEPA
            echo "##### Update MASTER"
            echo $SEPA
            git checkout master
            git pull -r

            # Check for merge conflicts
            mergeconflicts=$(git ls-files -u);

            if [ -n "$mergeconflicts" ]; then
                echo "\033[31mERROR\033[0m -- Please fix the merge conflicts first, after please push master";
                exit;
            fi

            git push
            
            
            echo " "
            echo " "
            echo $SEPA
            echo $SEPA
            echo $SEPA
            echo " "
            echo " Finished your hotfix on $(date)"
            echo " Note: it can take about 5 minutes before it is visible."
            echo "  "
            echo " @repository https://github.com/olmobuining/git-automated-hotfix"
            echo " @version 0.921"
            echo " "
            echo $SEPA
            echo $SEPA
            echo $SEPA
            echo " "
            echo " "
    
        else
            echo "STOP no commit message"
            echo "Please finish the progress to finsh this hotfix"
            echo "Files are added, but no commit done."
        fi
        
        
    else
        echo "Please enter a ticket number first!"
    fi
else
    echo "No changes made yet, make your changes (uncommited)"
fi
